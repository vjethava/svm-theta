* SVM-THETA  Dense subgraph finding using SVM's 

Copyright (C) 2012  Vinay Jethava <vjethava@gmail.com> 

** Code organization 

This code is organized as follows: 

- src/        	Source code for the jmlr paper. 
- lib/		Third party code. 
- data/		Directory for DIMACS graphs
  
*** src/
This directory contains the main implementation and experiments.  Experimental results reported in the paper can be generated by running the scripts. 

- src/ExpMultDimacs.m
- src/ExpPlantedClique.m

**** ExpMultDimacs.m

This script generates the table and figure corresponding to DIMACS graphs. 

**** ExpPlantedClique.m 

This script generates the planted clique figures and table. 

*** lib/ 

This directory contains third party code used as part of this project. These must be compiled on test machine for running the main code. We use two main external solvers  described below: 

- lib/libsvm/
- lib/SimpleMKL/ 

**** LIBSVM/ 

LIBSVM is generic SVM solver available from [[http://www.csie.ntu.edu.tw/~cjlin/libsvm/]].

**** SimpleMKL/ 

SimpleMKL is a solver for Multiple Kernel Learning available from [[http://asi.insa-rouen.fr/enseignants/~araakotom/code/mklindex.html]]


*** data/ 

The DIMACS dataset can be downloaded from
[[ftp://dimacs.rutgers.edu/pub/challenge/graph/benchmark/clique/]] and 
converted to ascii using converter provided at
[[http://cs.hbg.psu.edu/txn131/file_instances/converter.tar.gz]].
An example of the final ascii file is given below. 

**** data/brock200_1.clq
The file contains the list of edges 

3 2  \\\\
4 2   \\\\
...   \\\\
200 196   \\\\
200 197   \\\\
200 199    \\\\

*** TODO Main script for single run 
*** TODO Meta-script for DIMACS import directly from .tar.gz file
*** TODO Convert to command-line tool
     

*** Faster Eigenvalue computation
Running eigs with the option to compute largest eigenvalue works
better in practice large graphs. Here is the necessary code:

    A = getPlantedClique(n, p, k);
    d_max = max(sum(A, 2)); % maximum degree
    D = d_max*eye(n) - A;  % psd matrix -- diagonal dominance
    l_max = eigs(D, 1, 'LM'); % maximum eigenvalue of D
    rho = d_max - l_max; % minimum eigenvalue of A

Example code with timing information below: 

    >> n = 2000; p=0.5; A = getPlantedClique(n, p, ceil(6*sqrt(n)));
    >> tic; eig(A); toc
    Elapsed time is 0.852337 seconds.
    >> tic; eigs(A, 1, 'LM'); toc
    Elapsed time is 0.151511 seconds.
    >> n = 5000; p=0.5; A = getPlantedClique(n, p, ceil(6*sqrt(n)));
    >> tic; eigs(A, 1, 'LM'); toc
    Elapsed time is 0.405706 seconds.
    >> n = 10000; p=0.5; A = getPlantedClique(n, p, ceil(6*sqrt(n)));
    >> tic; eigs(A, 1, 'LM'); toc
    Elapsed time is 1.526702 seconds.
    >> n = 30000; p=0.5; A = getPlantedClique(n, p, ceil(6*sqrt(n)));
    >> tic; eigs(A, 1, 'LM'); toc
    Elapsed time is 13.372366 seconds.

*** TODO Computation using CUDA
Lanczos can be further optimized using GPGPU implementation. Available
implementation at http://itp.tu-graz.ac.at/~ralfgam/. Uses CSR
(Compressed Sparse Row) format (see
[[http://research.microsoft.com/pubs/172749/gpu_tr_12.pdf]] and SpMV) 

Also see SLEPc, PETSc, ViennaCL and Eigen3. Look at old Eigen3 self-code

** License
    
This program is free software: you can redistribute it and/or modify 
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.

